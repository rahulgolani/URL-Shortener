-------------------2-------------------------
creating a minimal flask application

-------------------3-------------------------
STATIC AND TEMPLATE FOLDER

flask app is organized as ->
static folder- public
templates folder - private

rendering template using html page (instead of hardcoding return values)

jinja templating(defining variables in python code and accessing it in the html template using {{var name}})

-----------------4------------

adding Bootstrap

from getbootstrap from starter templates

-----------------5-----------

Jinja Templating->

{{url_for('static',filename='file.png')}}
//to access the files from the static folder

---------------6-------------


static and template folder setup

main.py -- blog app
defined endpoints for about and contact

fixed bootstrap loading issue using {{url_for}}
fixed end points in anchor tag

Template inheritance using jinja

------------------7-----------------------

Template Inheritance

layout.html

{% extends "layout.html" %}
{% block body %}
  <ul>
  {% for user in users %}
    <li><a href="{{ user.url }}">{{ user.username }}</a></li>
  {% endfor %}
  </ul>
{% endblock %}


fixed all the pages for inheritance, defined end point for post page

---------------------8--------------------------

creating a database database
xampp - localhost/phpmyadmin/

2 tables -> posts and contact

---------------------9-----------------------------------------------

connecting flask with database using flask sqlalchemy

flask sqlalchemy is an orm

app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:@localhost/myblog' [important]
db = SQLAlchemy(app)

define class for a table to map the records
to store the contacts we will make a post request to a page which will store all the values in the table

to fetch the entry use name=request.form.get('name')
import request from the flask module
use ,methods=['GET','POST'] in the app.route to work with post request

now adding entries
entry=Contact(entries)
db.session.add(entry)
db.session.commit()

use action and method

error no module named MySQLdb
from unofficial python binaries install wheel for mysqlclient
install it from downloads folder

fix the date error using datetime

-----------------------10---------------------------

making paramaters configurable

config.json and define parameters in there
import json in main and open config.json

can make facebook, twitter and github urls configurable as well
target=_blank
make sure to enclose property name of config in double quotes while calling as well

---------------------11--------------------------------

sending the emails using flask
pip install flask-mail
app.config.update(to update the configurations)

---------------------12---------------------------------

altered table for post, included slug
endpoint post, <string:post_slug>, this also needs to be passed in the function [syntax]

query the table by Posts.query.filter_by(slug=post_slug).first()
first is used so that if multiple posts are there with same slug so first of them will be returned

getting data from database using the parameter post like post.content or post.title

will make a uploader for the images

made image_file column in database table post
using {{post.img_file}} but encoding error for braces

to fix this we will create a jinja variable within a jinja block [{% jinja block %}]

now we can use this variable in filename

made about text configurable


------------------------13--------------------------------------
Designing homepage, deciding number of posts visible on the homepage and when user clicks on any post he should get redirected to the particular page


used for loop of jinja, queried the table and passed the posts parameter to index.html

adding tagline to replace subtitle

restricted the number of posts to 3 to display on the page

----------------------14---------------
Admin dashboard

example bootstrap for signin page

used cdn bootstrap and navbar same as that of the Homepage

-------------------------15-----------------------------------

edit, delete and file upload

user authentication for login-> can get the username and password from request.form.get

creating sessions

managed login
to set the session variable in flask just import the session module from flask
session['username']=username
now if the user is already logged in then no need to display the login page again

just check if the user is present in the session

created a table to show all the details of posts in dashboard
